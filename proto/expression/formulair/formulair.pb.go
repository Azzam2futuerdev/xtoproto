// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: github.com/google/xtoproto/proto/expression/formulair/formulair.proto

package formulair

import (
	proto "github.com/golang/protobuf/proto"
	expression "github.com/google/xtoproto/proto/expression"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Type_BasicKind int32

const (
	Type_KIND_UNSPECIFIED Type_BasicKind = 0
	Type_NOT_BASIC_KIND   Type_BasicKind = 1
	Type_INT8             Type_BasicKind = 2
	Type_INT16            Type_BasicKind = 3
	Type_INT32            Type_BasicKind = 4
	Type_INT64            Type_BasicKind = 5
	Type_UINT8            Type_BasicKind = 6
	Type_UINT16           Type_BasicKind = 7
	Type_UINT32           Type_BasicKind = 8
	Type_UINT64           Type_BasicKind = 9
	Type_FLOAT32          Type_BasicKind = 10
	Type_FLOAT64          Type_BasicKind = 11
	Type_STRING           Type_BasicKind = 12
	Type_BYTES            Type_BasicKind = 13
)

// Enum value maps for Type_BasicKind.
var (
	Type_BasicKind_name = map[int32]string{
		0:  "KIND_UNSPECIFIED",
		1:  "NOT_BASIC_KIND",
		2:  "INT8",
		3:  "INT16",
		4:  "INT32",
		5:  "INT64",
		6:  "UINT8",
		7:  "UINT16",
		8:  "UINT32",
		9:  "UINT64",
		10: "FLOAT32",
		11: "FLOAT64",
		12: "STRING",
		13: "BYTES",
	}
	Type_BasicKind_value = map[string]int32{
		"KIND_UNSPECIFIED": 0,
		"NOT_BASIC_KIND":   1,
		"INT8":             2,
		"INT16":            3,
		"INT32":            4,
		"INT64":            5,
		"UINT8":            6,
		"UINT16":           7,
		"UINT32":           8,
		"UINT64":           9,
		"FLOAT32":          10,
		"FLOAT64":          11,
		"STRING":           12,
		"BYTES":            13,
	}
)

func (x Type_BasicKind) Enum() *Type_BasicKind {
	p := new(Type_BasicKind)
	*p = x
	return p
}

func (x Type_BasicKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type_BasicKind) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_enumTypes[0].Descriptor()
}

func (Type_BasicKind) Type() protoreflect.EnumType {
	return &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_enumTypes[0]
}

func (x Type_BasicKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type_BasicKind.Descriptor instead.
func (Type_BasicKind) EnumDescriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{2, 0}
}

type Binding_Kind int32

const (
	Binding_KIND_UNSPECIFIED Binding_Kind = 0
	Binding_FUNCTION         Binding_Kind = 1
	Binding_VARIABLE         Binding_Kind = 2
)

// Enum value maps for Binding_Kind.
var (
	Binding_Kind_name = map[int32]string{
		0: "KIND_UNSPECIFIED",
		1: "FUNCTION",
		2: "VARIABLE",
	}
	Binding_Kind_value = map[string]int32{
		"KIND_UNSPECIFIED": 0,
		"FUNCTION":         1,
		"VARIABLE":         2,
	}
)

func (x Binding_Kind) Enum() *Binding_Kind {
	p := new(Binding_Kind)
	*p = x
	return p
}

func (x Binding_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Binding_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_enumTypes[1].Descriptor()
}

func (Binding_Kind) Type() protoreflect.EnumType {
	return &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_enumTypes[1]
}

func (x Binding_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Binding_Kind.Descriptor instead.
func (Binding_Kind) EnumDescriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{4, 0}
}

type Graph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types []*Graph_TypeEntry `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *Graph) Reset() {
	*x = Graph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph) ProtoMessage() {}

func (x *Graph) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph.ProtoReflect.Descriptor instead.
func (*Graph) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{0}
}

func (x *Graph) GetTypes() []*Graph_TypeEntry {
	if x != nil {
		return x.Types
	}
	return nil
}

type ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ID) Reset() {
	*x = ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ID) ProtoMessage() {}

func (x *ID) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ID.ProtoReflect.Descriptor instead.
func (*ID) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{1}
}

func (x *ID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Spec:
	//	*Type_BasicKind_
	Spec isType_Spec `protobuf_oneof:"spec"`
}

func (x *Type) Reset() {
	*x = Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type) ProtoMessage() {}

func (x *Type) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type.ProtoReflect.Descriptor instead.
func (*Type) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{2}
}

func (x *Type) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (m *Type) GetSpec() isType_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *Type) GetBasicKind() Type_BasicKind {
	if x, ok := x.GetSpec().(*Type_BasicKind_); ok {
		return x.BasicKind
	}
	return Type_KIND_UNSPECIFIED
}

type isType_Spec interface {
	isType_Spec()
}

type Type_BasicKind_ struct {
	BasicKind Type_BasicKind `protobuf:"varint,2,opt,name=basic_kind,json=basicKind,proto3,enum=xtoproto.formula.internal.Type_BasicKind,oneof"`
}

func (*Type_BasicKind_) isType_Spec() {}

type LexicalEnvironment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bindings []*Binding `protobuf:"bytes,1,rep,name=bindings,proto3" json:"bindings,omitempty"`
}

func (x *LexicalEnvironment) Reset() {
	*x = LexicalEnvironment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LexicalEnvironment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LexicalEnvironment) ProtoMessage() {}

func (x *LexicalEnvironment) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LexicalEnvironment.ProtoReflect.Descriptor instead.
func (*LexicalEnvironment) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{3}
}

func (x *LexicalEnvironment) GetBindings() []*Binding {
	if x != nil {
		return x.Bindings
	}
	return nil
}

type Binding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind Binding_Kind       `protobuf:"varint,1,opt,name=kind,proto3,enum=xtoproto.formula.internal.Binding_Kind" json:"kind,omitempty"`
	Name *expression.Symbol `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Binding) Reset() {
	*x = Binding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Binding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binding) ProtoMessage() {}

func (x *Binding) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Binding.ProtoReflect.Descriptor instead.
func (*Binding) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{4}
}

func (x *Binding) GetKind() Binding_Kind {
	if x != nil {
		return x.Kind
	}
	return Binding_KIND_UNSPECIFIED
}

func (x *Binding) GetName() *expression.Symbol {
	if x != nil {
		return x.Name
	}
	return nil
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeId *ID `protobuf:"bytes,1,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	// Types that are assignable to ExecSpec:
	//	*Value_Constant
	//	*Value_Funcall
	ExecSpec isValue_ExecSpec `protobuf_oneof:"exec_spec"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{5}
}

func (x *Value) GetTypeId() *ID {
	if x != nil {
		return x.TypeId
	}
	return nil
}

func (m *Value) GetExecSpec() isValue_ExecSpec {
	if m != nil {
		return m.ExecSpec
	}
	return nil
}

func (x *Value) GetConstant() *expression.Expression {
	if x, ok := x.GetExecSpec().(*Value_Constant); ok {
		return x.Constant
	}
	return nil
}

func (x *Value) GetFuncall() *Funcall {
	if x, ok := x.GetExecSpec().(*Value_Funcall); ok {
		return x.Funcall
	}
	return nil
}

type isValue_ExecSpec interface {
	isValue_ExecSpec()
}

type Value_Constant struct {
	Constant *expression.Expression `protobuf:"bytes,2,opt,name=constant,proto3,oneof"`
}

type Value_Funcall struct {
	Funcall *Funcall `protobuf:"bytes,3,opt,name=funcall,proto3,oneof"`
}

func (*Value_Constant) isValue_ExecSpec() {}

func (*Value_Funcall) isValue_ExecSpec() {}

type Funcall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operand        *Value                  `protobuf:"bytes,1,opt,name=operand,proto3" json:"operand,omitempty"`
	PositionalArgs []*Value                `protobuf:"bytes,2,rep,name=positional_args,json=positionalArgs,proto3" json:"positional_args,omitempty"`
	KeywordArgs    []*KeywordArgumentValue `protobuf:"bytes,3,rep,name=keyword_args,json=keywordArgs,proto3" json:"keyword_args,omitempty"`
}

func (x *Funcall) Reset() {
	*x = Funcall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Funcall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Funcall) ProtoMessage() {}

func (x *Funcall) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Funcall.ProtoReflect.Descriptor instead.
func (*Funcall) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{6}
}

func (x *Funcall) GetOperand() *Value {
	if x != nil {
		return x.Operand
	}
	return nil
}

func (x *Funcall) GetPositionalArgs() []*Value {
	if x != nil {
		return x.PositionalArgs
	}
	return nil
}

func (x *Funcall) GetKeywordArgs() []*KeywordArgumentValue {
	if x != nil {
		return x.KeywordArgs
	}
	return nil
}

type KeywordArgumentValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword *Value `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Value   *Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeywordArgumentValue) Reset() {
	*x = KeywordArgumentValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeywordArgumentValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeywordArgumentValue) ProtoMessage() {}

func (x *KeywordArgumentValue) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeywordArgumentValue.ProtoReflect.Descriptor instead.
func (*KeywordArgumentValue) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{7}
}

func (x *KeywordArgumentValue) GetKeyword() *Value {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *KeywordArgumentValue) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type AST struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AST) Reset() {
	*x = AST{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AST) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AST) ProtoMessage() {}

func (x *AST) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AST.ProtoReflect.Descriptor instead.
func (*AST) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{8}
}

type Graph_TypeEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *ID   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type *Type `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Graph_TypeEntry) Reset() {
	*x = Graph_TypeEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graph_TypeEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph_TypeEntry) ProtoMessage() {}

func (x *Graph_TypeEntry) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph_TypeEntry.ProtoReflect.Descriptor instead.
func (*Graph_TypeEntry) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Graph_TypeEntry) GetId() *ID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Graph_TypeEntry) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

type Type_FunctionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args []*Type_FunctionCall_Arg `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Type_FunctionCall) Reset() {
	*x = Type_FunctionCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Type_FunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type_FunctionCall) ProtoMessage() {}

func (x *Type_FunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type_FunctionCall.ProtoReflect.Descriptor instead.
func (*Type_FunctionCall) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Type_FunctionCall) GetArgs() []*Type_FunctionCall_Arg {
	if x != nil {
		return x.Args
	}
	return nil
}

type Type_FunctionCall_Arg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identity:
	//	*Type_FunctionCall_Arg_Position
	Identity isType_FunctionCall_Arg_Identity `protobuf_oneof:"identity"`
}

func (x *Type_FunctionCall_Arg) Reset() {
	*x = Type_FunctionCall_Arg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Type_FunctionCall_Arg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type_FunctionCall_Arg) ProtoMessage() {}

func (x *Type_FunctionCall_Arg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type_FunctionCall_Arg.ProtoReflect.Descriptor instead.
func (*Type_FunctionCall_Arg) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (m *Type_FunctionCall_Arg) GetIdentity() isType_FunctionCall_Arg_Identity {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (x *Type_FunctionCall_Arg) GetPosition() int32 {
	if x, ok := x.GetIdentity().(*Type_FunctionCall_Arg_Position); ok {
		return x.Position
	}
	return 0
}

type isType_FunctionCall_Arg_Identity interface {
	isType_FunctionCall_Arg_Identity()
}

type Type_FunctionCall_Arg_Position struct {
	Position int32 `protobuf:"varint,1,opt,name=position,proto3,oneof"`
}

func (*Type_FunctionCall_Arg_Position) isType_FunctionCall_Arg_Identity() {}

type AST_ImportStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortName   string `protobuf:"bytes,1,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	PackagePath string `protobuf:"bytes,2,opt,name=package_path,json=packagePath,proto3" json:"package_path,omitempty"`
}

func (x *AST_ImportStatement) Reset() {
	*x = AST_ImportStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AST_ImportStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AST_ImportStatement) ProtoMessage() {}

func (x *AST_ImportStatement) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AST_ImportStatement.ProtoReflect.Descriptor instead.
func (*AST_ImportStatement) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{8, 0}
}

func (x *AST_ImportStatement) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *AST_ImportStatement) GetPackagePath() string {
	if x != nil {
		return x.PackagePath
	}
	return ""
}

type AST_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageShortName    string                 `protobuf:"bytes,1,opt,name=package_short_name,json=packageShortName,proto3" json:"package_short_name,omitempty"`
	Imports             []*AST_ImportStatement `protobuf:"bytes,2,rep,name=imports,proto3" json:"imports,omitempty"`
	ToplevelExpressions *AST_Expression        `protobuf:"bytes,3,opt,name=toplevel_expressions,json=toplevelExpressions,proto3" json:"toplevel_expressions,omitempty"`
}

func (x *AST_File) Reset() {
	*x = AST_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AST_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AST_File) ProtoMessage() {}

func (x *AST_File) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AST_File.ProtoReflect.Descriptor instead.
func (*AST_File) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{8, 1}
}

func (x *AST_File) GetPackageShortName() string {
	if x != nil {
		return x.PackageShortName
	}
	return ""
}

func (x *AST_File) GetImports() []*AST_ImportStatement {
	if x != nil {
		return x.Imports
	}
	return nil
}

func (x *AST_File) GetToplevelExpressions() *AST_Expression {
	if x != nil {
		return x.ToplevelExpressions
	}
	return nil
}

type AST_Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*AST_Expression_Void
	//	*AST_Expression_Constant
	//	*AST_Expression_Funcall
	//	*AST_Expression_Function
	//	*AST_Expression_Variable
	//	*AST_Expression_IfElse
	//	*AST_Expression_WhileLoop
	//	*AST_Expression_Let
	//	*AST_Expression_Program
	//	*AST_Expression_AssignVar
	Value         isAST_Expression_Value `protobuf_oneof:"value"`
	SourceContext *AST_SourceContext     `protobuf:"bytes,20,opt,name=source_context,json=sourceContext,proto3" json:"source_context,omitempty"`
}

func (x *AST_Expression) Reset() {
	*x = AST_Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AST_Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AST_Expression) ProtoMessage() {}

func (x *AST_Expression) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AST_Expression.ProtoReflect.Descriptor instead.
func (*AST_Expression) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{8, 2}
}

func (m *AST_Expression) GetValue() isAST_Expression_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *AST_Expression) GetVoid() *emptypb.Empty {
	if x, ok := x.GetValue().(*AST_Expression_Void); ok {
		return x.Void
	}
	return nil
}

func (x *AST_Expression) GetConstant() *AST_Constant {
	if x, ok := x.GetValue().(*AST_Expression_Constant); ok {
		return x.Constant
	}
	return nil
}

func (x *AST_Expression) GetFuncall() *AST_FunctionCall {
	if x, ok := x.GetValue().(*AST_Expression_Funcall); ok {
		return x.Funcall
	}
	return nil
}

func (x *AST_Expression) GetFunction() *AST_Function {
	if x, ok := x.GetValue().(*AST_Expression_Function); ok {
		return x.Function
	}
	return nil
}

func (x *AST_Expression) GetVariable() *AST_VariableRef {
	if x, ok := x.GetValue().(*AST_Expression_Variable); ok {
		return x.Variable
	}
	return nil
}

func (x *AST_Expression) GetIfElse() *AST_IfElse {
	if x, ok := x.GetValue().(*AST_Expression_IfElse); ok {
		return x.IfElse
	}
	return nil
}

func (x *AST_Expression) GetWhileLoop() *AST_WhileLoop {
	if x, ok := x.GetValue().(*AST_Expression_WhileLoop); ok {
		return x.WhileLoop
	}
	return nil
}

func (x *AST_Expression) GetLet() *AST_Let {
	if x, ok := x.GetValue().(*AST_Expression_Let); ok {
		return x.Let
	}
	return nil
}

func (x *AST_Expression) GetProgram() *AST_Program {
	if x, ok := x.GetValue().(*AST_Expression_Program); ok {
		return x.Program
	}
	return nil
}

func (x *AST_Expression) GetAssignVar() *AST_AssignVar {
	if x, ok := x.GetValue().(*AST_Expression_AssignVar); ok {
		return x.AssignVar
	}
	return nil
}

func (x *AST_Expression) GetSourceContext() *AST_SourceContext {
	if x != nil {
		return x.SourceContext
	}
	return nil
}

type isAST_Expression_Value interface {
	isAST_Expression_Value()
}

type AST_Expression_Void struct {
	Void *emptypb.Empty `protobuf:"bytes,1,opt,name=void,proto3,oneof"`
}

type AST_Expression_Constant struct {
	Constant *AST_Constant `protobuf:"bytes,2,opt,name=constant,proto3,oneof"`
}

type AST_Expression_Funcall struct {
	Funcall *AST_FunctionCall `protobuf:"bytes,3,opt,name=funcall,proto3,oneof"`
}

type AST_Expression_Function struct {
	Function *AST_Function `protobuf:"bytes,4,opt,name=function,proto3,oneof"`
}

type AST_Expression_Variable struct {
	Variable *AST_VariableRef `protobuf:"bytes,5,opt,name=variable,proto3,oneof"`
}

type AST_Expression_IfElse struct {
	IfElse *AST_IfElse `protobuf:"bytes,6,opt,name=if_else,json=ifElse,proto3,oneof"`
}

type AST_Expression_WhileLoop struct {
	WhileLoop *AST_WhileLoop `protobuf:"bytes,7,opt,name=while_loop,json=whileLoop,proto3,oneof"`
}

type AST_Expression_Let struct {
	Let *AST_Let `protobuf:"bytes,8,opt,name=let,proto3,oneof"`
}

type AST_Expression_Program struct {
	Program *AST_Program `protobuf:"bytes,9,opt,name=program,proto3,oneof"`
}

type AST_Expression_AssignVar struct {
	AssignVar *AST_AssignVar `protobuf:"bytes,10,opt,name=assign_var,json=assignVar,proto3,oneof"`
}

func (*AST_Expression_Void) isAST_Expression_Value() {}

func (*AST_Expression_Constant) isAST_Expression_Value() {}

func (*AST_Expression_Funcall) isAST_Expression_Value() {}

func (*AST_Expression_Function) isAST_Expression_Value() {}

func (*AST_Expression_Variable) isAST_Expression_Value() {}

func (*AST_Expression_IfElse) isAST_Expression_Value() {}

func (*AST_Expression_WhileLoop) isAST_Expression_Value() {}

func (*AST_Expression_Let) isAST_Expression_Value() {}

func (*AST_Expression_Program) isAST_Expression_Value() {}

func (*AST_Expression_AssignVar) isAST_Expression_Value() {}

type AST_Constant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *expression.Expression `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AST_Constant) Reset() {
	*x = AST_Constant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AST_Constant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AST_Constant) ProtoMessage() {}

func (x *AST_Constant) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AST_Constant.ProtoReflect.Descriptor instead.
func (*AST_Constant) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{8, 3}
}

func (x *AST_Constant) GetValue() *expression.Expression {
	if x != nil {
		return x.Value
	}
	return nil
}

type AST_IfElse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test           *AST_Expression `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	ThenExpression *AST_Expression `protobuf:"bytes,2,opt,name=then_expression,json=thenExpression,proto3" json:"then_expression,omitempty"`
	ElseExpression *AST_Expression `protobuf:"bytes,3,opt,name=else_expression,json=elseExpression,proto3" json:"else_expression,omitempty"`
}

func (x *AST_IfElse) Reset() {
	*x = AST_IfElse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AST_IfElse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AST_IfElse) ProtoMessage() {}

func (x *AST_IfElse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AST_IfElse.ProtoReflect.Descriptor instead.
func (*AST_IfElse) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{8, 4}
}

func (x *AST_IfElse) GetTest() *AST_Expression {
	if x != nil {
		return x.Test
	}
	return nil
}

func (x *AST_IfElse) GetThenExpression() *AST_Expression {
	if x != nil {
		return x.ThenExpression
	}
	return nil
}

func (x *AST_IfElse) GetElseExpression() *AST_Expression {
	if x != nil {
		return x.ElseExpression
	}
	return nil
}

type AST_WhileLoop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *AST_Expression `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	Body *AST_Expression `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *AST_WhileLoop) Reset() {
	*x = AST_WhileLoop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AST_WhileLoop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AST_WhileLoop) ProtoMessage() {}

func (x *AST_WhileLoop) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AST_WhileLoop.ProtoReflect.Descriptor instead.
func (*AST_WhileLoop) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{8, 5}
}

func (x *AST_WhileLoop) GetTest() *AST_Expression {
	if x != nil {
		return x.Test
	}
	return nil
}

func (x *AST_WhileLoop) GetBody() *AST_Expression {
	if x != nil {
		return x.Body
	}
	return nil
}

type AST_VariableRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol     *expression.Symbol `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	VariableId string             `protobuf:"bytes,2,opt,name=variable_id,json=variableId,proto3" json:"variable_id,omitempty"`
}

func (x *AST_VariableRef) Reset() {
	*x = AST_VariableRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AST_VariableRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AST_VariableRef) ProtoMessage() {}

func (x *AST_VariableRef) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AST_VariableRef.ProtoReflect.Descriptor instead.
func (*AST_VariableRef) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{8, 6}
}

func (x *AST_VariableRef) GetSymbol() *expression.Symbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *AST_VariableRef) GetVariableId() string {
	if x != nil {
		return x.VariableId
	}
	return ""
}

type AST_FunctionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function       *AST_Expression   `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	PositionalArgs []*AST_Expression `protobuf:"bytes,2,rep,name=positional_args,json=positionalArgs,proto3" json:"positional_args,omitempty"`
}

func (x *AST_FunctionCall) Reset() {
	*x = AST_FunctionCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AST_FunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AST_FunctionCall) ProtoMessage() {}

func (x *AST_FunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AST_FunctionCall.ProtoReflect.Descriptor instead.
func (*AST_FunctionCall) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{8, 7}
}

func (x *AST_FunctionCall) GetFunction() *AST_Expression {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *AST_FunctionCall) GetPositionalArgs() []*AST_Expression {
	if x != nil {
		return x.PositionalArgs
	}
	return nil
}

type AST_AssignVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variable *AST_VariableRef `protobuf:"bytes,1,opt,name=variable,proto3" json:"variable,omitempty"`
	Value    *AST_Expression  `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AST_AssignVar) Reset() {
	*x = AST_AssignVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AST_AssignVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AST_AssignVar) ProtoMessage() {}

func (x *AST_AssignVar) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AST_AssignVar.ProtoReflect.Descriptor instead.
func (*AST_AssignVar) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{8, 8}
}

func (x *AST_AssignVar) GetVariable() *AST_VariableRef {
	if x != nil {
		return x.Variable
	}
	return nil
}

func (x *AST_AssignVar) GetValue() *AST_Expression {
	if x != nil {
		return x.Value
	}
	return nil
}

type AST_Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args        []*AST_Function_Arg   `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	ReturnTypes []*AST_TypeExpression `protobuf:"bytes,2,rep,name=return_types,json=returnTypes,proto3" json:"return_types,omitempty"`
	Body        *AST_Expression       `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *AST_Function) Reset() {
	*x = AST_Function{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AST_Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AST_Function) ProtoMessage() {}

func (x *AST_Function) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AST_Function.ProtoReflect.Descriptor instead.
func (*AST_Function) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{8, 9}
}

func (x *AST_Function) GetArgs() []*AST_Function_Arg {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *AST_Function) GetReturnTypes() []*AST_TypeExpression {
	if x != nil {
		return x.ReturnTypes
	}
	return nil
}

func (x *AST_Function) GetBody() *AST_Expression {
	if x != nil {
		return x.Body
	}
	return nil
}

type AST_TypeExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Spec:
	//	*AST_TypeExpression_TypeName
	Spec          isAST_TypeExpression_Spec `protobuf_oneof:"spec"`
	SourceContext *AST_SourceContext        `protobuf:"bytes,8,opt,name=source_context,json=sourceContext,proto3" json:"source_context,omitempty"`
}

func (x *AST_TypeExpression) Reset() {
	*x = AST_TypeExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AST_TypeExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AST_TypeExpression) ProtoMessage() {}

func (x *AST_TypeExpression) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AST_TypeExpression.ProtoReflect.Descriptor instead.
func (*AST_TypeExpression) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{8, 10}
}

func (m *AST_TypeExpression) GetSpec() isAST_TypeExpression_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *AST_TypeExpression) GetTypeName() *expression.Symbol {
	if x, ok := x.GetSpec().(*AST_TypeExpression_TypeName); ok {
		return x.TypeName
	}
	return nil
}

func (x *AST_TypeExpression) GetSourceContext() *AST_SourceContext {
	if x != nil {
		return x.SourceContext
	}
	return nil
}

type isAST_TypeExpression_Spec interface {
	isAST_TypeExpression_Spec()
}

type AST_TypeExpression_TypeName struct {
	TypeName *expression.Symbol `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3,oneof"`
}

func (*AST_TypeExpression_TypeName) isAST_TypeExpression_Spec() {}

type AST_Program struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expressions []*AST_Expression `protobuf:"bytes,1,rep,name=expressions,proto3" json:"expressions,omitempty"`
}

func (x *AST_Program) Reset() {
	*x = AST_Program{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AST_Program) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AST_Program) ProtoMessage() {}

func (x *AST_Program) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AST_Program.ProtoReflect.Descriptor instead.
func (*AST_Program) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{8, 11}
}

func (x *AST_Program) GetExpressions() []*AST_Expression {
	if x != nil {
		return x.Expressions
	}
	return nil
}

type AST_Let struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bindings []*AST_Let_Binding `protobuf:"bytes,1,rep,name=bindings,proto3" json:"bindings,omitempty"`
	Body     *AST_Expression    `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	ScopeId  string             `protobuf:"bytes,3,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty"`
}

func (x *AST_Let) Reset() {
	*x = AST_Let{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AST_Let) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AST_Let) ProtoMessage() {}

func (x *AST_Let) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AST_Let.ProtoReflect.Descriptor instead.
func (*AST_Let) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{8, 12}
}

func (x *AST_Let) GetBindings() []*AST_Let_Binding {
	if x != nil {
		return x.Bindings
	}
	return nil
}

func (x *AST_Let) GetBody() *AST_Expression {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *AST_Let) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

type AST_SourceContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *expression.SourceContext `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *AST_SourceContext) Reset() {
	*x = AST_SourceContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AST_SourceContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AST_SourceContext) ProtoMessage() {}

func (x *AST_SourceContext) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AST_SourceContext.ProtoReflect.Descriptor instead.
func (*AST_SourceContext) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{8, 13}
}

func (x *AST_SourceContext) GetContext() *expression.SourceContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type AST_TestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InputFormula string          `protobuf:"bytes,2,opt,name=input_formula,json=inputFormula,proto3" json:"input_formula,omitempty"`
	Error        string          `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Expression   *AST_Expression `protobuf:"bytes,4,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *AST_TestCase) Reset() {
	*x = AST_TestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AST_TestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AST_TestCase) ProtoMessage() {}

func (x *AST_TestCase) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AST_TestCase.ProtoReflect.Descriptor instead.
func (*AST_TestCase) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{8, 14}
}

func (x *AST_TestCase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AST_TestCase) GetInputFormula() string {
	if x != nil {
		return x.InputFormula
	}
	return ""
}

func (x *AST_TestCase) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *AST_TestCase) GetExpression() *AST_Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

type AST_Function_Arg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol     *expression.Symbol  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Type       *AST_TypeExpression `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	VariableId string              `protobuf:"bytes,3,opt,name=variable_id,json=variableId,proto3" json:"variable_id,omitempty"`
}

func (x *AST_Function_Arg) Reset() {
	*x = AST_Function_Arg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AST_Function_Arg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AST_Function_Arg) ProtoMessage() {}

func (x *AST_Function_Arg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AST_Function_Arg.ProtoReflect.Descriptor instead.
func (*AST_Function_Arg) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{8, 9, 0}
}

func (x *AST_Function_Arg) GetSymbol() *expression.Symbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *AST_Function_Arg) GetType() *AST_TypeExpression {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *AST_Function_Arg) GetVariableId() string {
	if x != nil {
		return x.VariableId
	}
	return ""
}

type AST_Let_Binding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol     *expression.Symbol  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	VariableId string              `protobuf:"bytes,2,opt,name=variable_id,json=variableId,proto3" json:"variable_id,omitempty"`
	ValueType  *AST_TypeExpression `protobuf:"bytes,3,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
	Value      *AST_Expression     `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AST_Let_Binding) Reset() {
	*x = AST_Let_Binding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AST_Let_Binding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AST_Let_Binding) ProtoMessage() {}

func (x *AST_Let_Binding) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AST_Let_Binding.ProtoReflect.Descriptor instead.
func (*AST_Let_Binding) Descriptor() ([]byte, []int) {
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP(), []int{8, 12, 0}
}

func (x *AST_Let_Binding) GetSymbol() *expression.Symbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *AST_Let_Binding) GetVariableId() string {
	if x != nil {
		return x.VariableId
	}
	return ""
}

func (x *AST_Let_Binding) GetValueType() *AST_TypeExpression {
	if x != nil {
		return x.ValueType
	}
	return nil
}

func (x *AST_Let_Binding) GetValue() *AST_Expression {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_github_com_google_xtoproto_proto_expression_formulair_formulair_proto protoreflect.FileDescriptor

var file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDesc = []byte{
	0x0a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x69, 0x72, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x69,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x01,
	0x0a, 0x05, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x40, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x6f, 0x0a, 0x09, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x49,
	0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x14, 0x0a, 0x02, 0x49, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xd4, 0x03, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x78,
	0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x4b, 0x69, 0x6e, 0x64, 0x1a, 0x85, 0x01, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x44, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c,
	0x6c, 0x2e, 0x41, 0x72, 0x67, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x1a, 0x2f, 0x0a, 0x03, 0x41,
	0x72, 0x67, 0x12, 0x1c, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xc0, 0x01, 0x0a,
	0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54,
	0x33, 0x32, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x05, 0x12,
	0x09, 0x0a, 0x05, 0x55, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49,
	0x4e, 0x54, 0x31, 0x36, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x33, 0x32,
	0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x09, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x33, 0x32, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x4c, 0x4f, 0x41, 0x54, 0x36, 0x34, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x0d, 0x42,
	0x06, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x54, 0x0a, 0x12, 0x4c, 0x65, 0x78, 0x69, 0x63,
	0x61, 0x6c, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a,
	0x08, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xb1, 0x01,
	0x0a, 0x07, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x10, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x02, 0x22, 0xcb, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x78,
	0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x44, 0x52, 0x06, 0x74, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x66, 0x75, 0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x63, 0x61,
	0x6c, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x22,
	0xe4, 0x01, 0x0a, 0x07, 0x46, 0x75, 0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x3a, 0x0a, 0x07, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78,
	0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x52, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x41, 0x72, 0x67, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x78, 0x74, 0x6f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xc7, 0x19, 0x0a, 0x03, 0x41, 0x53, 0x54, 0x1a, 0x53, 0x0a, 0x0f, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x1a, 0xdc, 0x01, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x5c, 0x0a, 0x14, 0x74, 0x6f, 0x70, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x6f, 0x70, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x8d, 0x06, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x04, 0x76, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x76, 0x6f, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x07, 0x66, 0x75, 0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x41, 0x53, 0x54, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x45, 0x0a, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x66, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x40, 0x0a,
	0x07, 0x69, 0x66, 0x5f, 0x65, 0x6c, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x49,
	0x66, 0x45, 0x6c, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x69, 0x66, 0x45, 0x6c, 0x73, 0x65, 0x12,
	0x49, 0x0a, 0x0a, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x41, 0x53, 0x54, 0x2e, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x48, 0x00, 0x52,
	0x09, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x36, 0x0a, 0x03, 0x6c, 0x65,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x4c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6c,
	0x65, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x41, 0x53, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x49, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x76, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x74, 0x6f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x56, 0x61, 0x72, 0x48, 0x00, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x56, 0x61,
	0x72, 0x12, 0x53, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x78, 0x74, 0x6f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x41, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x74, 0x6f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xef, 0x01, 0x0a, 0x06, 0x49, 0x66, 0x45, 0x6c, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x74,
	0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0f,
	0x74, 0x68, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x74, 0x68, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x52, 0x0a, 0x0f, 0x65, 0x6c, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x74, 0x6f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x65, 0x6c, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x89, 0x01, 0x0a, 0x09, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x4c, 0x6f,
	0x6f, 0x70, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x1a, 0x63, 0x0a, 0x0b, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x1a, 0xa9, 0x01, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x45, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a,
	0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x72, 0x67,
	0x73, 0x1a, 0x94, 0x01, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x56, 0x61, 0x72, 0x12,
	0x46, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x53,
	0x54, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xfd, 0x02, 0x0a, 0x08, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x41, 0x53, 0x54, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x67,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78,
	0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x9e, 0x01, 0x0a, 0x03, 0x41, 0x72, 0x67, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41,
	0x53, 0x54, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x1a, 0xa9, 0x01, 0x0a, 0x0e, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x06, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x1a, 0x56, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12,
	0x4b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x41, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x98, 0x03, 0x0a,
	0x03, 0x4c, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x4c, 0x65, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x74, 0x6f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x1a, 0xee, 0x01, 0x0a, 0x07, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78,
	0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x4d, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x74, 0x6f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xa4, 0x01, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x49, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x41, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x37, 0x5a,
	0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x78, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x69, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescOnce sync.Once
	file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescData = file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDesc
)

func file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescGZIP() []byte {
	file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescOnce.Do(func() {
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescData)
	})
	return file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDescData
}

var file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_goTypes = []interface{}{
	(Type_BasicKind)(0),              // 0: xtoproto.formula.internal.Type.BasicKind
	(Binding_Kind)(0),                // 1: xtoproto.formula.internal.Binding.Kind
	(*Graph)(nil),                    // 2: xtoproto.formula.internal.Graph
	(*ID)(nil),                       // 3: xtoproto.formula.internal.ID
	(*Type)(nil),                     // 4: xtoproto.formula.internal.Type
	(*LexicalEnvironment)(nil),       // 5: xtoproto.formula.internal.LexicalEnvironment
	(*Binding)(nil),                  // 6: xtoproto.formula.internal.Binding
	(*Value)(nil),                    // 7: xtoproto.formula.internal.Value
	(*Funcall)(nil),                  // 8: xtoproto.formula.internal.Funcall
	(*KeywordArgumentValue)(nil),     // 9: xtoproto.formula.internal.KeywordArgumentValue
	(*AST)(nil),                      // 10: xtoproto.formula.internal.AST
	(*Graph_TypeEntry)(nil),          // 11: xtoproto.formula.internal.Graph.TypeEntry
	(*Type_FunctionCall)(nil),        // 12: xtoproto.formula.internal.Type.FunctionCall
	(*Type_FunctionCall_Arg)(nil),    // 13: xtoproto.formula.internal.Type.FunctionCall.Arg
	(*AST_ImportStatement)(nil),      // 14: xtoproto.formula.internal.AST.ImportStatement
	(*AST_File)(nil),                 // 15: xtoproto.formula.internal.AST.File
	(*AST_Expression)(nil),           // 16: xtoproto.formula.internal.AST.Expression
	(*AST_Constant)(nil),             // 17: xtoproto.formula.internal.AST.Constant
	(*AST_IfElse)(nil),               // 18: xtoproto.formula.internal.AST.IfElse
	(*AST_WhileLoop)(nil),            // 19: xtoproto.formula.internal.AST.WhileLoop
	(*AST_VariableRef)(nil),          // 20: xtoproto.formula.internal.AST.VariableRef
	(*AST_FunctionCall)(nil),         // 21: xtoproto.formula.internal.AST.FunctionCall
	(*AST_AssignVar)(nil),            // 22: xtoproto.formula.internal.AST.AssignVar
	(*AST_Function)(nil),             // 23: xtoproto.formula.internal.AST.Function
	(*AST_TypeExpression)(nil),       // 24: xtoproto.formula.internal.AST.TypeExpression
	(*AST_Program)(nil),              // 25: xtoproto.formula.internal.AST.Program
	(*AST_Let)(nil),                  // 26: xtoproto.formula.internal.AST.Let
	(*AST_SourceContext)(nil),        // 27: xtoproto.formula.internal.AST.SourceContext
	(*AST_TestCase)(nil),             // 28: xtoproto.formula.internal.AST.TestCase
	(*AST_Function_Arg)(nil),         // 29: xtoproto.formula.internal.AST.Function.Arg
	(*AST_Let_Binding)(nil),          // 30: xtoproto.formula.internal.AST.Let.Binding
	(*expression.Symbol)(nil),        // 31: xtoproto.expression.Symbol
	(*expression.Expression)(nil),    // 32: xtoproto.expression.Expression
	(*emptypb.Empty)(nil),            // 33: google.protobuf.Empty
	(*expression.SourceContext)(nil), // 34: xtoproto.expression.SourceContext
}
var file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_depIdxs = []int32{
	11, // 0: xtoproto.formula.internal.Graph.types:type_name -> xtoproto.formula.internal.Graph.TypeEntry
	3,  // 1: xtoproto.formula.internal.Type.id:type_name -> xtoproto.formula.internal.ID
	0,  // 2: xtoproto.formula.internal.Type.basic_kind:type_name -> xtoproto.formula.internal.Type.BasicKind
	6,  // 3: xtoproto.formula.internal.LexicalEnvironment.bindings:type_name -> xtoproto.formula.internal.Binding
	1,  // 4: xtoproto.formula.internal.Binding.kind:type_name -> xtoproto.formula.internal.Binding.Kind
	31, // 5: xtoproto.formula.internal.Binding.name:type_name -> xtoproto.expression.Symbol
	3,  // 6: xtoproto.formula.internal.Value.type_id:type_name -> xtoproto.formula.internal.ID
	32, // 7: xtoproto.formula.internal.Value.constant:type_name -> xtoproto.expression.Expression
	8,  // 8: xtoproto.formula.internal.Value.funcall:type_name -> xtoproto.formula.internal.Funcall
	7,  // 9: xtoproto.formula.internal.Funcall.operand:type_name -> xtoproto.formula.internal.Value
	7,  // 10: xtoproto.formula.internal.Funcall.positional_args:type_name -> xtoproto.formula.internal.Value
	9,  // 11: xtoproto.formula.internal.Funcall.keyword_args:type_name -> xtoproto.formula.internal.KeywordArgumentValue
	7,  // 12: xtoproto.formula.internal.KeywordArgumentValue.keyword:type_name -> xtoproto.formula.internal.Value
	7,  // 13: xtoproto.formula.internal.KeywordArgumentValue.value:type_name -> xtoproto.formula.internal.Value
	3,  // 14: xtoproto.formula.internal.Graph.TypeEntry.id:type_name -> xtoproto.formula.internal.ID
	4,  // 15: xtoproto.formula.internal.Graph.TypeEntry.type:type_name -> xtoproto.formula.internal.Type
	13, // 16: xtoproto.formula.internal.Type.FunctionCall.args:type_name -> xtoproto.formula.internal.Type.FunctionCall.Arg
	14, // 17: xtoproto.formula.internal.AST.File.imports:type_name -> xtoproto.formula.internal.AST.ImportStatement
	16, // 18: xtoproto.formula.internal.AST.File.toplevel_expressions:type_name -> xtoproto.formula.internal.AST.Expression
	33, // 19: xtoproto.formula.internal.AST.Expression.void:type_name -> google.protobuf.Empty
	17, // 20: xtoproto.formula.internal.AST.Expression.constant:type_name -> xtoproto.formula.internal.AST.Constant
	21, // 21: xtoproto.formula.internal.AST.Expression.funcall:type_name -> xtoproto.formula.internal.AST.FunctionCall
	23, // 22: xtoproto.formula.internal.AST.Expression.function:type_name -> xtoproto.formula.internal.AST.Function
	20, // 23: xtoproto.formula.internal.AST.Expression.variable:type_name -> xtoproto.formula.internal.AST.VariableRef
	18, // 24: xtoproto.formula.internal.AST.Expression.if_else:type_name -> xtoproto.formula.internal.AST.IfElse
	19, // 25: xtoproto.formula.internal.AST.Expression.while_loop:type_name -> xtoproto.formula.internal.AST.WhileLoop
	26, // 26: xtoproto.formula.internal.AST.Expression.let:type_name -> xtoproto.formula.internal.AST.Let
	25, // 27: xtoproto.formula.internal.AST.Expression.program:type_name -> xtoproto.formula.internal.AST.Program
	22, // 28: xtoproto.formula.internal.AST.Expression.assign_var:type_name -> xtoproto.formula.internal.AST.AssignVar
	27, // 29: xtoproto.formula.internal.AST.Expression.source_context:type_name -> xtoproto.formula.internal.AST.SourceContext
	32, // 30: xtoproto.formula.internal.AST.Constant.value:type_name -> xtoproto.expression.Expression
	16, // 31: xtoproto.formula.internal.AST.IfElse.test:type_name -> xtoproto.formula.internal.AST.Expression
	16, // 32: xtoproto.formula.internal.AST.IfElse.then_expression:type_name -> xtoproto.formula.internal.AST.Expression
	16, // 33: xtoproto.formula.internal.AST.IfElse.else_expression:type_name -> xtoproto.formula.internal.AST.Expression
	16, // 34: xtoproto.formula.internal.AST.WhileLoop.test:type_name -> xtoproto.formula.internal.AST.Expression
	16, // 35: xtoproto.formula.internal.AST.WhileLoop.body:type_name -> xtoproto.formula.internal.AST.Expression
	31, // 36: xtoproto.formula.internal.AST.VariableRef.symbol:type_name -> xtoproto.expression.Symbol
	16, // 37: xtoproto.formula.internal.AST.FunctionCall.function:type_name -> xtoproto.formula.internal.AST.Expression
	16, // 38: xtoproto.formula.internal.AST.FunctionCall.positional_args:type_name -> xtoproto.formula.internal.AST.Expression
	20, // 39: xtoproto.formula.internal.AST.AssignVar.variable:type_name -> xtoproto.formula.internal.AST.VariableRef
	16, // 40: xtoproto.formula.internal.AST.AssignVar.value:type_name -> xtoproto.formula.internal.AST.Expression
	29, // 41: xtoproto.formula.internal.AST.Function.args:type_name -> xtoproto.formula.internal.AST.Function.Arg
	24, // 42: xtoproto.formula.internal.AST.Function.return_types:type_name -> xtoproto.formula.internal.AST.TypeExpression
	16, // 43: xtoproto.formula.internal.AST.Function.body:type_name -> xtoproto.formula.internal.AST.Expression
	31, // 44: xtoproto.formula.internal.AST.TypeExpression.type_name:type_name -> xtoproto.expression.Symbol
	27, // 45: xtoproto.formula.internal.AST.TypeExpression.source_context:type_name -> xtoproto.formula.internal.AST.SourceContext
	16, // 46: xtoproto.formula.internal.AST.Program.expressions:type_name -> xtoproto.formula.internal.AST.Expression
	30, // 47: xtoproto.formula.internal.AST.Let.bindings:type_name -> xtoproto.formula.internal.AST.Let.Binding
	16, // 48: xtoproto.formula.internal.AST.Let.body:type_name -> xtoproto.formula.internal.AST.Expression
	34, // 49: xtoproto.formula.internal.AST.SourceContext.context:type_name -> xtoproto.expression.SourceContext
	16, // 50: xtoproto.formula.internal.AST.TestCase.expression:type_name -> xtoproto.formula.internal.AST.Expression
	31, // 51: xtoproto.formula.internal.AST.Function.Arg.symbol:type_name -> xtoproto.expression.Symbol
	24, // 52: xtoproto.formula.internal.AST.Function.Arg.type:type_name -> xtoproto.formula.internal.AST.TypeExpression
	31, // 53: xtoproto.formula.internal.AST.Let.Binding.symbol:type_name -> xtoproto.expression.Symbol
	24, // 54: xtoproto.formula.internal.AST.Let.Binding.value_type:type_name -> xtoproto.formula.internal.AST.TypeExpression
	16, // 55: xtoproto.formula.internal.AST.Let.Binding.value:type_name -> xtoproto.formula.internal.AST.Expression
	56, // [56:56] is the sub-list for method output_type
	56, // [56:56] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_init() }
func file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_init() {
	if File_github_com_google_xtoproto_proto_expression_formulair_formulair_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LexicalEnvironment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Binding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Funcall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeywordArgumentValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AST); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graph_TypeEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Type_FunctionCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Type_FunctionCall_Arg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AST_ImportStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AST_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AST_Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AST_Constant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AST_IfElse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AST_WhileLoop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AST_VariableRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AST_FunctionCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AST_AssignVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AST_Function); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AST_TypeExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AST_Program); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AST_Let); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AST_SourceContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AST_TestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AST_Function_Arg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AST_Let_Binding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Type_BasicKind_)(nil),
	}
	file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Value_Constant)(nil),
		(*Value_Funcall)(nil),
	}
	file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Type_FunctionCall_Arg_Position)(nil),
	}
	file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*AST_Expression_Void)(nil),
		(*AST_Expression_Constant)(nil),
		(*AST_Expression_Funcall)(nil),
		(*AST_Expression_Function)(nil),
		(*AST_Expression_Variable)(nil),
		(*AST_Expression_IfElse)(nil),
		(*AST_Expression_WhileLoop)(nil),
		(*AST_Expression_Let)(nil),
		(*AST_Expression_Program)(nil),
		(*AST_Expression_AssignVar)(nil),
	}
	file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*AST_TypeExpression_TypeName)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_goTypes,
		DependencyIndexes: file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_depIdxs,
		EnumInfos:         file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_enumTypes,
		MessageInfos:      file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_msgTypes,
	}.Build()
	File_github_com_google_xtoproto_proto_expression_formulair_formulair_proto = out.File
	file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_rawDesc = nil
	file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_goTypes = nil
	file_github_com_google_xtoproto_proto_expression_formulair_formulair_proto_depIdxs = nil
}
