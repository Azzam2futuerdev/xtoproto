// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package xtoproto;

import "github.com/google/xtoproto/proto/recordtoproto/recordtoproto.proto";

option go_package = "github.com/google/xtoproto/proto/service";

// XToProtoService is a gRPC service intended to be run locally on a
// developer's workstation.
//
// The service infers the types of columns from record-oriented input files and
// generates Protocol Buffer definitions.
//
// Here is the full process of converting a record-oriented data stream in a
// foreign format to a record-oriented file of custom Protocol Buffer
// definitions:
//
// 1. `infer` will read example input records and attempt to infer a mapping
// from the input format to a new protocol buffer definition. The output of
// this step is a mapping of type RecordProtoMapping.
//
// 2. `codegen` will take a mapping file create/update
//
//    A) A `.proto` file with the proto specified in the mapping.
//
//    B) A `.go` file that implements the mapping specified in the
//    RecordProtoMapping. The package provides functions for converting
//    a single record or a file's worth of records. The user may include
//    other functionality in the same package if desired.
//
//    C) TODO: The BUILD or BUILD.bazel file for the above proto and .go files.
//    To support this, we will need to add options to GenerateCode.
//
// The service provides the `infer` and `codegen` steps as two separate
// RPC definitions.
service XToProtoService {
  // Sends a greeting
  rpc Infer(InferRequest) returns (InferResponse) {}

  // GenerateCode generates .proto, .go, and BUILD file updates from a
  // provided mapping file.
  rpc GenerateCode(GenerateCodeRequest) returns (GenerateCodeResponse) {}
}

message InferRequest {
  // Examples of the input file. At the moment, this should be a list of
  // length 1.
  repeated InputFile example_inputs = 1;

  // The input file type must be specified explicitly.
  Format input_format = 2;

  // MessageName is the name of the output message. This name should be a short
  // name, not a fully qualified name.
  string message_name = 3;

  // The value to use in the package statement of the output .proto file.
  string package_name = 4;

  // Values to be used in the GoOptions output mapping.
  // See http://cs/symbol:csvtoproto.GoOptions.
  string go_package_name = 5;
  string go_proto_import = 6;

  // The time zone name used to parse timestamps that do
  // not have an explicit timezone. This is an IANA time zone as used in the
  // go "time" package.
  string timestamp_location = 7;
}

message InputFile {
  oneof spec {
    string input_path = 1;
    bytes input_content = 2;
  }
}

enum Format {
  UNSPECIFIED_FORMAT = 0;
  CSV = 1;
}

message InferResponse {
  // Candidates contains a set of likely protobuf mappings. At present, this
  // field will contain a single candidate if inference was successful, but
  // future versions may output multiple variations for user inspection.
  MappingSet best_mapping_candidate = 1;

  // TODO(reddaly): Report warnings or other issues.
}

// MappingCandidate is a potential mapping from a single record
message MappingSet {
  // The mapping for the example records passed to the infer process.
  //
  // This is called "top-level" because it corresponds the records passed
  // into the inference engine, but other types might also be inferred in
  // the process, such as enums and child messages.
  xtoproto.RecordProtoMapping top_level_mapping = 1;

  // Other mapping types that were inferred that do not correspond to the
  // top-level record type. These are child messages and enums.
  repeated xtoproto.RecordProtoMapping additional_mappings = 2;
}

message GenerateCodeRequest {
  // The mapping that will be used to output the Protocol Buffer definition
  // and the converter code.
  xtoproto.RecordProtoMapping mapping = 1;

  // The root of the workspace where files should be output. The other
  // directory names should be relative to this directory.
  string workspace_path = 2;

  // Options related to the creation of the .proto file.
  message ProtoDefinition {
    // Directory in which to store the proto relative to the workspace_path.
    string directory = 1;
    // The name of the proto file to output relative to the directory name.
    string proto_file_name = 2;

    // Try to update the BUILD or BUILD.bazel file associated with the proto
    // rule.
    bool update_build_rules = 3;
  }
  ProtoDefinition proto_definition = 3;

  message Converter {
    // Directory where the generated .go file should be placed relative to
    // the workspace path.
    string directory = 1;
    string go_file_name = 2;

    // Try to update the BUILD or BUILD.bazel file associated with the go
    // rule.
    bool update_build_rules = 3;
  }
  Converter converter = 4;
}

message GenerateCodeResponse {
  // File has the name and contents of generated code.
  message File {
    string workspace_relative_path = 1;
    bytes new_contents = 2;
  }
  File proto_file = 1;
  File proto_build_file = 2;
  File converter_go_file = 3;
  File converter_build_file = 4;
}
